import tensorflow as tffrom tensorflow.examples.tutorials.mnist import input_dataimport numpy as npimport randomimport matplotlibmatplotlib.use('TkAgg')from matplotlib import pyplot as pltdef showpic(X):    plt.close()    plt.imshow(np.reshape(X,(28*10,28)), cmap=plt.cm.binary)    plt.title('Average_pictures')    plt.savefig('Mfig_CluNum.jpg')def get_mnist(train_size):    image =[[0.00 for col in range(784)] for row in range(10)]    image2 =[[0.00 for col in range(784)] for row in range(10)]    average_pic = np.array(image)    variance_pic = np.array(image2)    mnist = input_data.read_data_sets('MNIST_data', one_hot=True)    #print ("Training data size: ",mnist.train.num_examples)    #print ("Validating data size: ",mnist.validation.num_examples)    #print ("Testing data size: ",mnist.test.num_examples)    #print(len(mnist.train.images[0]))    #print(len(average_pic[0]))    cla_num = [0,0,0,0,0,0,0,0,0,0]    cla = np.array(cla_num)    for i in range(train_size):        z = 0 #Which number the picture refers to according to the label        for j in mnist.train.labels[i]:            if j == 1:                break            z = z + 1        cla[z] = cla[z] + 1        average_pic[z] = np.array( average_pic[z] * (1 - 1/cla[z]) )+ mnist.train.images[z] * ( 1/cla[z] )    for i in range(train_size):        z = 0 #Which number the picture refers to according to the label        for j in mnist.train.labels[i]:            if j == 1:                break            z = z + 1        tmp = np.array(mnist.train.images[z] - average_pic[z])        variance_pic[z] = variance_pic[z] + tmp * tmp    for i in range(len(variance_pic)):        variance_pic[i] = variance_pic[i] / cla[i]    print( average_pic[0])#print( variance_pic[0])    image3 =[[0.00 for col in range(784)] for row in range(10)]    result_pic = np.array(image3)    for i in range(len(result_pic)):        for j in range(len(result_pic[0])):            result_pic[i][j] = random.gauss(average_pic[i][j],variance_pic[i][j])#print(variance_pic[0])    showpic(result_pic)    return result_picif __name__ == '__main__':    get_mnist(1000)